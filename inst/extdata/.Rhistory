else{ #if there is no choppering
sc1<-c(rep(1, x[2]),rep(2, x[3]),rep(3, x[4]),rep(4, x[5]))
l0<-length(sc1)
if (l0!=0){
scenario<-c()
for (i in 1:l0){
m<-resample(sc1, 1)
sc1<-sc1[-which(sc1==m)[1]]
if (i==1) {scenario<-c(scenario,m)} else {scenario<-c(scenario, c(rep(0, constraints[scenario[length(scenario)]+1,m+1]-1), m))}}
scenario<-c(scenario, rep(0,sum(x)-length(scenario)))}}
#Check if valid scenario
if (identical(as.vector(x), freq_sc(scenario))==FALSE){scenario<-rep(NA, sum(x))}
return(scenario)}
sc<-scenarios(constraints=constraints)
constraints
path
constraints<-import_constraints(path=path)
constraints
sc<-scenarios(constraints=constraints)
sc[3542,]
library(readr)
data <- read_delim("~/Postdoc/Experiments/Root exudates 2018/Data_germination_2018.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(data)
data<-as.data.frame(data)
model<-glm(Count~Exudates, data, family=poisson())
anova(model)
anova(model, test="F")
anova(model, test="Chisq")
boxplot(Count~Exudates, data)
data <- read_delim("~/Postdoc/Experiments/Root exudates 2018/Data_germination_2018.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(data)
data<-as.data.frame(data)
boxplot(Count~Exudates, data)
model<-glm(Count~Exudates, data, family=poisson())
anova(model, test="Chisq")
model<-glm(Count~Exudates, data, family=quasipoisson)
anova(model, test="F")
model
summary(model)
E2<-resid(model, type="pearson") #Pearson residuals
F2<-fitted(model) #Fitted values (same scale as the response variable)
plot(F2, E2, xlab="Fitted values", ylab="Pearson residuals")
model<-glm(Count~Exudates, data, family=poisson)
E2<-resid(model, type="pearson") #Pearson residuals
F2<-fitted(model) #Fitted values (same scale as the response variable)
plot(F2, E2, xlab="Fitted values", ylab="Pearson residuals")
summary(model)
mean<-aggregate(data$Count, by=list(data$Exudates), mean)
variance<-aggregate(data$Count, by=list(data$Exudates), var)
plot(mean$x, variance$x, pch=16)
install.packages("betareg")
getwd(9)
getwd()
library(heathland)
sc<-scenarios(n=100, filename="100yrsGMBC.txt")
install.packages("BenjaminDelory/heathland")
devtools::install_github("BenjaminDelory/heathland")
library(heathland)
sc<-scenarios(n=100, filename="100yrsGMBC.txt")
balanceN<-nuts(sc, nutrient="N")
devtools::install_github("BenjaminDelory/heathland")
library(heathland)
balanceN<-nuts(sc, nutrient="N")
balanceN[1:10,]
install.packages(c("XML", "sp"))
devtools::install_github("archidart/archidart")
library(archiDART)
table<-rsmlToTable(inputrsml="C:/Users/Benjamin Delory/Desktop", unitlength="cm", rsml.connect=TRUE)
table
architect(inputrsml=table)
table<-rsmlToTable(inputrsml="C:/Users/Benjamin Delory/Desktop/roots002.00.rsml", unitlength="cm", rsml.connect=TRUE)
table<-rsmlToTable(inputrsml="C:/Users/Benjamin Delory/Desktop", unitlength="cm", rsml.connect=TRUE)
table<-rsmlToTable(inputrsml="C:/Users/Benjamin Delory/Desktop", unitlength="cm", rsml.connect=FALSE)
x
#Load data
library(readr)
data <- read_delim("~/Postdoc/Articles/Walmsley et al_2018/Santana et al_2016_data.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(data)
#Convert g/mÂ² in kg/ha
data$Calluna<-data$Calluna*10000/1000
data$Litter<-data$Litter*10000/1000
#Fit model for Calluna
plot(data$Years, data$Calluna)
model<-nls(Calluna~a*exp(-exp(-((Years-b)/c))), data=data,
start=list(a=max(data$Calluna), b=0.5*max(data$Years), c=0.25*max(data$Years)))
t<-seq(0.1, 50, by=0.05)
y<-predict(model, newdata=data.frame(Years=t))
plot(t,y,type="l", xlab="Time (years)", ylab="Biomass (kg/ha)", las=1, ylim=c(0,23000),
main="Calluna")
points(data$Years, data$Calluna, pch=16)
abline(h=1888.96)
abline(h=5000)
plot(t,y,type="l", xlab="Time (years)", ylab="Biomass (kg/ha)", las=1, ylim=c(0,30000),
main="Calluna")
points(data$Years, data$Calluna, pch=16)
lines(t,y+5000, lty=2)
library(readr)
ph <- read_delim("~/Postdoc/Experiments/RSA metallophytes 2018/Soil_pH_water.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(ph)
setwd("C:/Users/Benjamin Delory/Documents/Postdoc/Experiments/RSA metallophytes 2018")
plot(ph$Cu, ph$pH, ylab="pH (water)", xlab="Soil Cu concentration (mg/kg)", las=1, pch=1)
plot(ph$Cu, ph$pH, ylab="pH (water)", xlab="Soil Cu concentration (mg/kg)", las=1, pch=1, ylim=c(4.5,6))
mean<-aggregate(ph$pH, by=list(ph$Cu), mean)
mean
mean<-aggregate(ph$pH, by=list(Cu=ph$Cu), mean)
mean
plot(ph$Cu, ph$pH, ylab="pH (water)", xlab="Soil Cu concentration (mg/kg)", las=1, pch=1, ylim=c(4.5,6),
yaxt="n")
axis(2, at=seq(4.5, 6, by=0.25), las=1)
mean<-aggregate(ph$pH, by=list(Cu=ph$Cu), mean)
points(mean$Cu, mean$x, pch=16)
lines(mean$Cu, mean$x)
tiff(filename="Soil_pH.tiff", res=1000, width=9, height = 9, units="cm", compression="lzw", pointsize=8)
plot(ph$Cu, ph$pH, ylab="pH (water)", xlab="Soil Cu concentration (mg/kg)", las=1, pch=1, ylim=c(4.5,6),
yaxt="n")
axis(2, at=seq(4.5, 6, by=0.25), las=1)
mean<-aggregate(ph$pH, by=list(Cu=ph$Cu), mean)
points(mean$Cu, mean$x, pch=16)
lines(mean$Cu, mean$x)
dev.off()
tiff(filename="Soil_pH.tiff", res=1000, width=9, height = 9, units="cm", compression="lzw", pointsize=8)
plot(ph$Cu, ph$pH, ylab="pH (water)", xlab="Soil Cu concentration (mg/kg)", las=1, pch=1, ylim=c(4.5,6),
yaxt="n")
axis(2, at=seq(4.5, 6, by=0.25), las=1)
mean<-aggregate(ph$pH, by=list(Cu=ph$Cu), mean)
#points(mean$Cu, mean$x, pch=16)
lines(mean$Cu, mean$x)
dev.off()
library(readr)
data <- read_delim("C:/Users/Benjamin Delory/Desktop/Nutrient.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(data)
setwd("C:/Users/Benjamin Delory/Documents/GitHub/heathland/inst/extdata")
write.table(data, "nutrientcontent.txt", col.names = T, row.names = F, sep="\t")
path<-C:/Users/Benjamin Delory/Documents/GitHub/heathland/inst/extdata
path<-getwd()
path
as.matrix(read.table(paste(path, "nutrientcontent.txt", sep="/")))
as.matrix(read.table(paste(path, "nutrientcontent.txt", sep="/")), col.names=T)
as.matrix(read.table(paste(path, "nutrientcontent.txt", sep="/")), header=T)
as.matrix(read.table(paste(path, "nutrientcontent.txt", sep="/"), header=TRUE))
nutrientcontent<-as.matrix(read.table(paste(path, "nutrientcontent.txt", sep="/"), header=TRUE))
model<-lm(N~Year, nutrientcontent)
nutrientcontent<-as.data.frame(read.table(paste(path, "nutrientcontent.txt", sep="/"), header=TRUE))
nutrientcontent
model<-lm(N~Year, nutrientcontent)
model
coef(model)
coef(model)[1]
coef(model)[2]
a.nutri<-coef(lm(N~Year, nutrientcontent))[2]
b.nutri<-coef(lm(N~Year, nutrientcontent))[1]
a.nutri
b.nutri
a.nutri<-coef(lm(Ca~Year, nutrientcontent))[2]
a.nutri
a.nutri<-coef(lm(N/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(N/100~Year, nutrientcontent))[1]
a.nutri
b.nutri
import_nutrients<-function(path=NULL){
#Error interceptions
if (is.null(path)==FALSE & is.character(path)==FALSE){stop("If path is not NULL, it must be a character string")}
#Locate extdata folder
if (is.null(path)==TRUE){path<-system.file("extdata", package="heathland")}
#create list
data<-list(grazing=as.matrix(read.table(paste(path, "grazing.txt", sep="/"))),
mowing=as.matrix(read.table(paste(path, "mowing.txt", sep="/"))),
burning=as.matrix(read.table(paste(path, "burning.txt", sep="/"))),
choppering=as.matrix(read.table(paste(path, "choppering.txt", sep="/"))),
sodcutting=as.matrix(read.table(paste(path, "sodcutting.txt", sep="/"))))
class(data)<-c("list", "nutrients")
return(data)}
data<-import_nutrients(path=path)
data
nutribal<-cmpfun(function(x, data=import_nutrients(), sqa=list(grazing=1, mowing=5, burning=5, choppering=7),
bioleft=list(mowing=5133.63, burning=1888.96), nutrient="N", Datm=NULL,
gompertz=list(a=20148.38, b=8.48362, c=6.647557)){
#x is a vector for a possible management scenario
if (is.list(data)==FALSE){stop("data must be a list containing model parameters")}
if ("nutrients" %in% class(data)){} else {stop("data must be a nutrients object")}
if (is.list(sqa)==FALSE){stop("sqa must be a list")}
if (nutrient=="N"|nutrient=="P"|nutrient=="K"|nutrient=="Ca"|nutrient=="Mg"){} else {stop("nutrient must be either N, P, K, Ca, or Mg")}
if (is.null(Datm)==FALSE){if (is.numeric(Datm)==TRUE & length(Datm)==1 & Datm>=0) {} else {stop("Datm must be a single positive numeric value")}}
if (is.list(gompertz)==FALSE){stop("gompertz must be a list containing model parameters")}
if (is.list(bioleft)==FALSE){stop("bioleft must be a list containing model parameters")}
#Set model parameters
path<-system.file("extdata", package="heathland")
nutrientcontent<-as.data.frame(read.table(paste(path, "nutrientcontent.txt", sep="/"), header=TRUE))
if (nutrient=="N"){
a.nutri<-coef(lm(N/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(N/100~Year, nutrientcontent))[1]}
if (nutrient=="P"){
a.nutri<-coef(lm(P/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(P/100~Year, nutrientcontent))[1]}
if (nutrient=="K"){
a.nutri<-coef(lm(K/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(K/100~Year, nutrientcontent))[1]}
if (nutrient=="Ca"){
a.nutri<-coef(lm(Ca/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(Ca/100~Year, nutrientcontent))[1]}
if (nutrient=="Mg"){
a.nutri<-coef(lm(Mg/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(Mg/100~Year, nutrientcontent))[1]}
#Check scenario
#index<-which(x>0)
#if (length(index)>1){
#for (i in 1:index[length(index)-1]){
#if (x[i]==1 & sqa[["grazing"]]>1){
#if (identical(x[(i+1):(i+sqa[["grazing"]]-1)],rep(0, sqa[["grazing"]]-1))==FALSE){stop(paste("Invalid scenario (sqa for grazing = ", sqa[["grazing"]], "). Management allowed if status quo ante is reached.", sep=""))}}
#if (x[i]==2 & sqa[["mowing"]]>1){
#if (identical(x[(i+1):(i+sqa[["mowing"]]-1)],rep(0, sqa[["mowing"]]-1))==FALSE){stop(paste("Invalid scenario (sqa for mowing = ", sqa[["mowing"]], "). Management allowed if status quo ante is reached.", sep=""))}}
#if (x[i]==3 & sqa[["burning"]]>1){
#if (identical(x[(i+1):(i+sqa[["burning"]]-1)],rep(0, sqa[["burning"]]-1))==FALSE){stop(paste("Invalid scenario (sqa for burning = ", sqa[["burning"]], "). Management allowed if status quo ante is reached.", sep=""))}}
#if (x[i]==4 & sqa[["choppering"]]>1){
#if (identical(x[(i+1):(i+sqa[["choppering"]]-1)],rep(0, sqa[["choppering"]]-1))==FALSE){stop(paste("Invalid scenario (sqa for choppering = ", sqa[["choppering"]], "). Management allowed if status quo ante is reached.", sep=""))}}}}
#Compute nutrient balance
n<-length(x) #Number of simulated years
results<-rep(NA, length.out=n+1) #Create vector to store results
results[1]<-0
meanvalues<-Reduce('+', data)/length(data)
datanutri1<-meanvalues[,nutrient]
if (is.null(Datm)==TRUE){Datm<-meanvalues["Datm", nutrient]}
for (i in 1:n){
#Store nutrient data for a particular management
if (x[i]==1){
datanutri<-data$grazing[,nutrient]
management<-"grazing"}
if (x[i]==2){
datanutri<-data$mowing[,nutrient]
management<-"mowing"
time<-0}
if (x[i]==3){
datanutri<-data$burning[,nutrient]
management<-"burning"
time<-0}
if (x[i]==4){ #We start all scenarios with a choppering
datanutri<-data$choppering[,nutrient]
management<-"choppering"
biomass<-0
time<-0}
if (x[i]==0){time<-time+1}
#Calculate nutrient balance model parameters
if (x[i]==1){
R<-datanutri["R"]
Esheep<-datanutri["Esheep"]
Dash<-0}
if (x[i]==2){
#Calculate Calluna biomass of the stand (Gompertz model)
if (management=="choppering") {biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))}
if (management=="burning"){biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))+bioleft$burning}
if (management=="mowing"){biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))+bioleft$mowing}
R<-(biomass-bioleft$mowing)*(a.nutri*time+b.nutri)
Esheep<-0
Dash<-0
biomass<-bioleft$mowing}
if (x[i]==3){
#Calculate Calluna biomass of the stand (Gompertz model)
if (management=="choppering") {biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))}
if (management=="burning"){biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))+bioleft$burning}
if (management=="mowing"){biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))+bioleft$mowing}
R<-(biomass-bioleft$burning)*(a.nutri*time+b.nutri)
Esheep<-0
Dash<-(datanutri["Dash"]/11806)*biomass
biomass<-bioleft$burning}
if (x[i]==4){
R<-datanutri["R"]
Esheep<-0
Dash<-0}
#Calculate nutrient balance
if (sum(x)==0){balance<-Datm-datanutri1["Lcontrol"]}
else{
if (x[i]>0) {
t<-1
balance<-(Datm+Esheep)-(R+datanutri["Lfirst"]-Dash)}
if (x[i]==0){
t<-t+1
if (t<sqa[[management]]){L<-(t*(datanutri["Lcontrol"]-datanutri["Lfirst"])/(sqa[[management]]-1))+((sqa[[management]]*datanutri["Lfirst"]-datanutri["Lcontrol"])/(sqa[[management]]-1))} else {L<-datanutri1["Lcontrol"]}
balance<-Datm-L}}
results[i+1]<-balance}
results<-cumsum(results) #Show cumulative nutrient balance
return(results)})
library(compiler)
library(bigmemory)
library(biganalytics)
nutribal<-cmpfun(function(x, data=import_nutrients(), sqa=list(grazing=1, mowing=5, burning=5, choppering=7),
bioleft=list(mowing=5133.63, burning=1888.96), nutrient="N", Datm=NULL,
gompertz=list(a=20148.38, b=8.48362, c=6.647557)){
#x is a vector for a possible management scenario
if (is.list(data)==FALSE){stop("data must be a list containing model parameters")}
if ("nutrients" %in% class(data)){} else {stop("data must be a nutrients object")}
if (is.list(sqa)==FALSE){stop("sqa must be a list")}
if (nutrient=="N"|nutrient=="P"|nutrient=="K"|nutrient=="Ca"|nutrient=="Mg"){} else {stop("nutrient must be either N, P, K, Ca, or Mg")}
if (is.null(Datm)==FALSE){if (is.numeric(Datm)==TRUE & length(Datm)==1 & Datm>=0) {} else {stop("Datm must be a single positive numeric value")}}
if (is.list(gompertz)==FALSE){stop("gompertz must be a list containing model parameters")}
if (is.list(bioleft)==FALSE){stop("bioleft must be a list containing model parameters")}
#Set model parameters
path<-system.file("extdata", package="heathland")
nutrientcontent<-as.data.frame(read.table(paste(path, "nutrientcontent.txt", sep="/"), header=TRUE))
if (nutrient=="N"){
a.nutri<-coef(lm(N/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(N/100~Year, nutrientcontent))[1]}
if (nutrient=="P"){
a.nutri<-coef(lm(P/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(P/100~Year, nutrientcontent))[1]}
if (nutrient=="K"){
a.nutri<-coef(lm(K/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(K/100~Year, nutrientcontent))[1]}
if (nutrient=="Ca"){
a.nutri<-coef(lm(Ca/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(Ca/100~Year, nutrientcontent))[1]}
if (nutrient=="Mg"){
a.nutri<-coef(lm(Mg/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(Mg/100~Year, nutrientcontent))[1]}
#Check scenario
#index<-which(x>0)
#if (length(index)>1){
#for (i in 1:index[length(index)-1]){
#if (x[i]==1 & sqa[["grazing"]]>1){
#if (identical(x[(i+1):(i+sqa[["grazing"]]-1)],rep(0, sqa[["grazing"]]-1))==FALSE){stop(paste("Invalid scenario (sqa for grazing = ", sqa[["grazing"]], "). Management allowed if status quo ante is reached.", sep=""))}}
#if (x[i]==2 & sqa[["mowing"]]>1){
#if (identical(x[(i+1):(i+sqa[["mowing"]]-1)],rep(0, sqa[["mowing"]]-1))==FALSE){stop(paste("Invalid scenario (sqa for mowing = ", sqa[["mowing"]], "). Management allowed if status quo ante is reached.", sep=""))}}
#if (x[i]==3 & sqa[["burning"]]>1){
#if (identical(x[(i+1):(i+sqa[["burning"]]-1)],rep(0, sqa[["burning"]]-1))==FALSE){stop(paste("Invalid scenario (sqa for burning = ", sqa[["burning"]], "). Management allowed if status quo ante is reached.", sep=""))}}
#if (x[i]==4 & sqa[["choppering"]]>1){
#if (identical(x[(i+1):(i+sqa[["choppering"]]-1)],rep(0, sqa[["choppering"]]-1))==FALSE){stop(paste("Invalid scenario (sqa for choppering = ", sqa[["choppering"]], "). Management allowed if status quo ante is reached.", sep=""))}}}}
#Compute nutrient balance
n<-length(x) #Number of simulated years
results<-rep(NA, length.out=n+1) #Create vector to store results
results[1]<-0
meanvalues<-Reduce('+', data)/length(data)
datanutri1<-meanvalues[,nutrient]
if (is.null(Datm)==TRUE){Datm<-meanvalues["Datm", nutrient]}
for (i in 1:n){
#Store nutrient data for a particular management
if (x[i]==1){
datanutri<-data$grazing[,nutrient]
management<-"grazing"}
if (x[i]==2){
datanutri<-data$mowing[,nutrient]
management<-"mowing"
time<-0}
if (x[i]==3){
datanutri<-data$burning[,nutrient]
management<-"burning"
time<-0}
if (x[i]==4){ #We start all scenarios with a choppering
datanutri<-data$choppering[,nutrient]
management<-"choppering"
biomass<-0
time<-0}
if (x[i]==0){time<-time+1}
#Calculate nutrient balance model parameters
if (x[i]==1){
R<-datanutri["R"]
Esheep<-datanutri["Esheep"]
Dash<-0}
if (x[i]==2){
#Calculate Calluna biomass of the stand (Gompertz model)
if (management=="choppering") {biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))}
if (management=="burning"){biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))+bioleft$burning}
if (management=="mowing"){biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))+bioleft$mowing}
R<-(biomass-bioleft$mowing)*(a.nutri*time+b.nutri)
Esheep<-0
Dash<-0
biomass<-bioleft$mowing}
if (x[i]==3){
#Calculate Calluna biomass of the stand (Gompertz model)
if (management=="choppering") {biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))}
if (management=="burning"){biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))+bioleft$burning}
if (management=="mowing"){biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))+bioleft$mowing}
R<-(biomass-bioleft$burning)*(a.nutri*time+b.nutri)
Esheep<-0
Dash<-(datanutri["Dash"]/11806)*biomass
biomass<-bioleft$burning}
if (x[i]==4){
R<-datanutri["R"]
Esheep<-0
Dash<-0}
#Calculate nutrient balance
if (sum(x)==0){balance<-Datm-datanutri1["Lcontrol"]}
else{
if (x[i]>0) {
t<-1
balance<-(Datm+Esheep)-(R+datanutri["Lfirst"]-Dash)}
if (x[i]==0){
t<-t+1
if (t<sqa[[management]]){L<-(t*(datanutri["Lcontrol"]-datanutri["Lfirst"])/(sqa[[management]]-1))+((sqa[[management]]*datanutri["Lfirst"]-datanutri["Lcontrol"])/(sqa[[management]]-1))} else {L<-datanutri1["Lcontrol"]}
balance<-Datm-L}}
results[i+1]<-balance}
results<-cumsum(results) #Show cumulative nutrient balance
return(results)})
data
test<-nutribal(x=c(4,0,0,0,0,0,0,1,1,2), data=data)
path
nutribal<-cmpfun(function(x, data=import_nutrients(), sqa=list(grazing=1, mowing=5, burning=5, choppering=7),
bioleft=list(mowing=5133.63, burning=1888.96), nutrient="N", Datm=NULL,
gompertz=list(a=20148.38, b=8.48362, c=6.647557)){
#x is a vector for a possible management scenario
if (is.list(data)==FALSE){stop("data must be a list containing model parameters")}
if ("nutrients" %in% class(data)){} else {stop("data must be a nutrients object")}
if (is.list(sqa)==FALSE){stop("sqa must be a list")}
if (nutrient=="N"|nutrient=="P"|nutrient=="K"|nutrient=="Ca"|nutrient=="Mg"){} else {stop("nutrient must be either N, P, K, Ca, or Mg")}
if (is.null(Datm)==FALSE){if (is.numeric(Datm)==TRUE & length(Datm)==1 & Datm>=0) {} else {stop("Datm must be a single positive numeric value")}}
if (is.list(gompertz)==FALSE){stop("gompertz must be a list containing model parameters")}
if (is.list(bioleft)==FALSE){stop("bioleft must be a list containing model parameters")}
#Set model parameters
#path<-system.file("extdata", package="heathland")
nutrientcontent<-as.data.frame(read.table(paste(path, "nutrientcontent.txt", sep="/"), header=TRUE))
if (nutrient=="N"){
a.nutri<-coef(lm(N/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(N/100~Year, nutrientcontent))[1]}
if (nutrient=="P"){
a.nutri<-coef(lm(P/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(P/100~Year, nutrientcontent))[1]}
if (nutrient=="K"){
a.nutri<-coef(lm(K/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(K/100~Year, nutrientcontent))[1]}
if (nutrient=="Ca"){
a.nutri<-coef(lm(Ca/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(Ca/100~Year, nutrientcontent))[1]}
if (nutrient=="Mg"){
a.nutri<-coef(lm(Mg/100~Year, nutrientcontent))[2]
b.nutri<-coef(lm(Mg/100~Year, nutrientcontent))[1]}
#Check scenario
#index<-which(x>0)
#if (length(index)>1){
#for (i in 1:index[length(index)-1]){
#if (x[i]==1 & sqa[["grazing"]]>1){
#if (identical(x[(i+1):(i+sqa[["grazing"]]-1)],rep(0, sqa[["grazing"]]-1))==FALSE){stop(paste("Invalid scenario (sqa for grazing = ", sqa[["grazing"]], "). Management allowed if status quo ante is reached.", sep=""))}}
#if (x[i]==2 & sqa[["mowing"]]>1){
#if (identical(x[(i+1):(i+sqa[["mowing"]]-1)],rep(0, sqa[["mowing"]]-1))==FALSE){stop(paste("Invalid scenario (sqa for mowing = ", sqa[["mowing"]], "). Management allowed if status quo ante is reached.", sep=""))}}
#if (x[i]==3 & sqa[["burning"]]>1){
#if (identical(x[(i+1):(i+sqa[["burning"]]-1)],rep(0, sqa[["burning"]]-1))==FALSE){stop(paste("Invalid scenario (sqa for burning = ", sqa[["burning"]], "). Management allowed if status quo ante is reached.", sep=""))}}
#if (x[i]==4 & sqa[["choppering"]]>1){
#if (identical(x[(i+1):(i+sqa[["choppering"]]-1)],rep(0, sqa[["choppering"]]-1))==FALSE){stop(paste("Invalid scenario (sqa for choppering = ", sqa[["choppering"]], "). Management allowed if status quo ante is reached.", sep=""))}}}}
#Compute nutrient balance
n<-length(x) #Number of simulated years
results<-rep(NA, length.out=n+1) #Create vector to store results
results[1]<-0
meanvalues<-Reduce('+', data)/length(data)
datanutri1<-meanvalues[,nutrient]
if (is.null(Datm)==TRUE){Datm<-meanvalues["Datm", nutrient]}
for (i in 1:n){
#Store nutrient data for a particular management
if (x[i]==1){
datanutri<-data$grazing[,nutrient]
management<-"grazing"}
if (x[i]==2){
datanutri<-data$mowing[,nutrient]
management<-"mowing"
time<-0}
if (x[i]==3){
datanutri<-data$burning[,nutrient]
management<-"burning"
time<-0}
if (x[i]==4){ #We start all scenarios with a choppering
datanutri<-data$choppering[,nutrient]
management<-"choppering"
biomass<-0
time<-0}
if (x[i]==0){time<-time+1}
#Calculate nutrient balance model parameters
if (x[i]==1){
R<-datanutri["R"]
Esheep<-datanutri["Esheep"]
Dash<-0}
if (x[i]==2){
#Calculate Calluna biomass of the stand (Gompertz model)
if (management=="choppering") {biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))}
if (management=="burning"){biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))+bioleft$burning}
if (management=="mowing"){biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))+bioleft$mowing}
R<-(biomass-bioleft$mowing)*(a.nutri*time+b.nutri)
Esheep<-0
Dash<-0
biomass<-bioleft$mowing}
if (x[i]==3){
#Calculate Calluna biomass of the stand (Gompertz model)
if (management=="choppering") {biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))}
if (management=="burning"){biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))+bioleft$burning}
if (management=="mowing"){biomass<-gompertz$a*exp(-exp(-((time-gompertz$b)/gompertz$c)))+bioleft$mowing}
R<-(biomass-bioleft$burning)*(a.nutri*time+b.nutri)
Esheep<-0
Dash<-(datanutri["Dash"]/11806)*biomass
biomass<-bioleft$burning}
if (x[i]==4){
R<-datanutri["R"]
Esheep<-0
Dash<-0}
#Calculate nutrient balance
if (sum(x)==0){balance<-Datm-datanutri1["Lcontrol"]}
else{
if (x[i]>0) {
t<-1
balance<-(Datm+Esheep)-(R+datanutri["Lfirst"]-Dash)}
if (x[i]==0){
t<-t+1
if (t<sqa[[management]]){L<-(t*(datanutri["Lcontrol"]-datanutri["Lfirst"])/(sqa[[management]]-1))+((sqa[[management]]*datanutri["Lfirst"]-datanutri["Lcontrol"])/(sqa[[management]]-1))} else {L<-datanutri1["Lcontrol"]}
balance<-Datm-L}}
results[i+1]<-balance}
results<-cumsum(results) #Show cumulative nutrient balance
return(results)})
test<-nutribal(x=c(4,0,0,0,0,0,0,1,1,2), data=data)
test
gompertz
gompertz=list(a=20148.38, b=8.48362, c=6.647557)
gompertz$a*exp(-exp(-((3-gompertz$b)/gompertz$c)))
gompertz$a*exp(-exp(-((4-gompertz$b)/gompertz$c)))
